// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcx_test/proto/grpcx_test.proto

package proto

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestReq struct {
	Data                 int32    `protobuf:"varint,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestReq) Reset()         { *m = TestReq{} }
func (m *TestReq) String() string { return proto.CompactTextString(m) }
func (*TestReq) ProtoMessage()    {}
func (*TestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1787cb00e935d556, []int{0}
}

func (m *TestReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestReq.Unmarshal(m, b)
}
func (m *TestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestReq.Marshal(b, m, deterministic)
}
func (m *TestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestReq.Merge(m, src)
}
func (m *TestReq) XXX_Size() int {
	return xxx_messageInfo_TestReq.Size(m)
}
func (m *TestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TestReq.DiscardUnknown(m)
}

var xxx_messageInfo_TestReq proto.InternalMessageInfo

func (m *TestReq) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

type TestResponse struct {
	Data                 int32    `protobuf:"varint,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1787cb00e935d556, []int{1}
}

func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResponse.Unmarshal(m, b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
}
func (m *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(m, src)
}
func (m *TestResponse) XXX_Size() int {
	return xxx_messageInfo_TestResponse.Size(m)
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

func (m *TestResponse) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

func init() {
	proto.RegisterType((*TestReq)(nil), "proto.TestReq")
	proto.RegisterType((*TestResponse)(nil), "proto.TestResponse")
}

func init() { proto.RegisterFile("grpcx_test/proto/grpcx_test.proto", fileDescriptor_1787cb00e935d556) }

var fileDescriptor_1787cb00e935d556 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0x2f, 0x2a, 0x48,
	0xae, 0x88, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f,
	0x49, 0x2d, 0x2e, 0xd1, 0x03, 0x33, 0x85, 0x58, 0xc1, 0x94, 0x92, 0x2c, 0x17, 0x7b, 0x48, 0x6a,
	0x71, 0x49, 0x50, 0x6a, 0xa1, 0x90, 0x10, 0x17, 0x8b, 0x4b, 0x62, 0x49, 0xa2, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x6b, 0x10, 0x98, 0xad, 0xa4, 0xc4, 0xc5, 0x03, 0x91, 0x2e, 0x2e, 0xc8, 0xcf, 0x2b,
	0x4e, 0xc5, 0xa6, 0xc6, 0xc8, 0x06, 0x6a, 0x44, 0x41, 0xb2, 0x90, 0x21, 0x17, 0x87, 0x7b, 0x6a,
	0x89, 0x73, 0x62, 0x72, 0x46, 0xaa, 0x10, 0x1f, 0xc4, 0x22, 0x3d, 0xa8, 0xf1, 0x52, 0xc2, 0x28,
	0x7c, 0x88, 0x79, 0x4a, 0x0c, 0x4e, 0x9c, 0x51, 0xec, 0x7a, 0xd6, 0x60, 0x99, 0x24, 0x36, 0x30,
	0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x22, 0xeb, 0x1b, 0xcc, 0xba, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestRpcClient is the client API for TestRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestRpcClient interface {
	GetCache(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResponse, error)
}

type testRpcClient struct {
	cc *grpc.ClientConn
}

func NewTestRpcClient(cc *grpc.ClientConn) TestRpcClient {
	return &testRpcClient{cc}
}

func (c *testRpcClient) GetCache(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/proto.TestRpc/GetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestRpcServer is the server API for TestRpc service.
type TestRpcServer interface {
	GetCache(context.Context, *TestReq) (*TestResponse, error)
}

// UnimplementedTestRpcServer can be embedded to have forward compatible implementations.
type UnimplementedTestRpcServer struct {
}

func (*UnimplementedTestRpcServer) GetCache(ctx context.Context, req *TestReq) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCache not implemented")
}

func RegisterTestRpcServer(s *grpc.Server, srv TestRpcServer) {
	s.RegisterService(&_TestRpc_serviceDesc, srv)
}

func _TestRpc_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRpcServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TestRpc/GetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRpcServer).GetCache(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TestRpc",
	HandlerType: (*TestRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCache",
			Handler:    _TestRpc_GetCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcx_test/proto/grpcx_test.proto",
}
